/************************************************************************
 * Module:  Anexo.java
 * Author:  Jesus Limon
 * Created: 29.Oct.2002
 * Purpose: Defines the Class Usuario
 * Ultima Modificacion:
 * By:
 ***********************************************************************/

package com.gob;

import java.sql.*;
import java.io.*;
import java.util.*;
import com.consiss.db.*;
import com.consiss.util.tools.*;

public class Anexo {

//Declaración de Variables
  private int iIdAnexo;
  private String sClave;
  private String sNombre;
  private String sNombreCorto;
  private String sEstatusNoAplica = "0";
  private String sEstatusVacio = "1";
  private String sEstatusEnProceso = "2";
  private String sEstatusLleno = "3";
  private VMatrix oVm;
  private ConnectionJDBC oCnn;

//Inicializacion de la Clase
  public Anexo() throws SQLException, IOException {
    iIdAnexo = 0;
    sClave = "";
    sNombre = "";
    sNombreCorto = "";
    oVm = new VMatrix();
    oCnn = new ConnectionJDBC();
    /*oCnn.SetDsn("GobiernoER");
       oCnn.SetUsuario("sa");
       oCnn.SetClave("");*/
  }

//Creación de las Propiedades
  public void SetIdAnexo(int iDATA) {
    iIdAnexo = iDATA;
  }

  public int GetIdAnexo() {
    return iIdAnexo;
  }

  public int GetIdAnexo(int iPos) {
    int iGetIdAnexo = -1;
    try {
      iGetIdAnexo = java.lang.Integer.parseInt( ( ( (Vector) oVm.getVMatrixAll().
          elementAt(0)).elementAt(iPos) + ""));
    }
    catch (Throwable e) {
      System.out.println("oAnexo.GetIdAnexo: No se ejecutó con exito " + e +
                         " Pos:" + iPos + " [data]:" +
                         ( (Vector) oVm.getVMatrixAll().elementAt(0)).elementAt(
          iPos));
    }
    finally {
      return iGetIdAnexo;
    }
  }

  public void SetClave(String iDATA) {
    sClave = iDATA;
  }

  public String GetClave() {
    return sClave;
  }

  public String GetClave(int iPos) {
    return ( (Vector) oVm.getVMatrixAll().elementAt(1)).elementAt(iPos).
        toString();
  }

  public void SetNombre(String iDATA) {
    sNombre = iDATA;
  }

  public String GetNombre() {
    return sNombre;
  }

  public String GetNombre(int iPos) {
    return ( (Vector) oVm.getVMatrixAll().elementAt(2)).elementAt(iPos).
        toString();
  }

  public void SetNombreCorto(String iDATA) {
    sNombreCorto = iDATA;
  }

  public String GetNombreCorto() {
    return sNombreCorto;
  }

  public String GetNombreCorto(int iPos) {
    return ( (Vector) oVm.getVMatrixAll().elementAt(3)).elementAt(iPos).
        toString();
  }

  public String GetEstatusNoAplica() {
    return sEstatusNoAplica;
  }

  public String GetEstatusVacio() {
    return sEstatusVacio;
  }

  public String GetEstatusEnProceso() {
    return sEstatusEnProceso;
  }

  public String GetEstatusLleno() {
    return sEstatusLleno;
  }

//Metodos públicos
  public boolean Get(int pIdAnexo) throws SQLException, IOException {
    ResultSet oRs;
    String sSql;
    sSql =
        "SELECT IdAnexo, Clave, Nombre, NombreCorto FROM Anexo WHERE IdAnexo = " +
        pIdAnexo;
    try {
      oCnn.Open();
      oRs = oCnn.Execute(sSql);
      if (oRs.next()) {
        CargaDatos(oRs.getInt("IdAnexo"), oRs.getString("Clave"),
                   oRs.getString("Nombre"), oRs.getString("NombreCorto"));
        this.Close(oRs);
      }
      else {
        this.Close(oRs);
      }
      return false;
    }
    catch (Throwable e) {
      System.out.println("Error en oAnexo.Get: " + e + " SQL:" + sSql);
      oCnn.Close();
    }
    return false;
  }

  public void Get(String pUsuario) throws SQLException, IOException {

  }

  public VMatrix GetAll() throws SQLException, IOException {
    if (oVm.getNumRows() > 0) {
      return oVm;
    }
    String sSql;
    ResultSet oRs;
    sSql =
        "SELECT IdAnexo, Clave, Nombre, NombreCorto FROM Anexo WHERE IdAnexo not in (40,41) ORDER BY IdAnexo";
    try {
      oCnn.Open();
      oRs = oCnn.Execute(sSql);
      oVm.setVMatrixNumCols(4);
      while (oRs.next()) {
        String sTemp[] = {
            oRs.getString("IdAnexo"), oRs.getString("Clave"),
            oRs.getString("Nombre"), oRs.getString("NombreCorto")};
        oVm.setVMatrixRow(sTemp);
      }
      this.Close(oRs);
    }
    catch (Throwable e) {
      System.out.println("Error en oAnexo.GetAll: " + e + " SQL:" + sSql);
    }
    finally {
      oCnn.Close();
      return oVm;
    }
  }

  public VMatrix GetAll(int pIdUsuarioLimitado) throws SQLException,
      IOException {
    // Utilizados en la formacion del menu.jsp
    if (oVm.getNumRows() > 0) {
      return oVm;
    }
    String sSql;
    ResultSet oRs;
    sSql =
        "SELECT a.IdAnexo, Clave, Nombre, NombreCorto FROM Anexo a, UsuarioAnexo b " +
        "WHERE a.IdAnexo not in (40,41) and a.IdAnexo = b.IdAnexo AND IdUsuarioLimitado = " +
        pIdUsuarioLimitado + " ORDER BY a.IdAnexo";
    try {
      oCnn.Open();
      oRs = oCnn.Execute(sSql);
      oVm.setVMatrixNumCols(4);
      while (oRs.next()) {
        String sTemp[] = {
            oRs.getString("IdAnexo"), oRs.getString("Clave"),
            oRs.getString("Nombre"), oRs.getString("NombreCorto")};
        oVm.setVMatrixRow(sTemp);
      }
      this.Close(oRs);
    }
    catch (Throwable e) {
      System.out.println("Error en oAnexo.GetAll: " + e + " SQL:" + sSql);
    }
    finally {
      oCnn.Close();
      return oVm;
    }
  }

  public int GetPos(int pIdAnexo) throws SQLException, IOException {
    GetAll();
    return ( (Vector) oVm.getVMatrixAll().elementAt(0)).indexOf( (pIdAnexo + ""),
        0);
  }

  public int GetPos(int pIdAnexo, int pIdUsuarioLimitado) throws SQLException,
      IOException {
    GetAll(pIdUsuarioLimitado);
    return ( (Vector) oVm.getVMatrixAll().elementAt(0)).indexOf( (pIdAnexo + ""),
        0);
  }

  public int GetAsignados(int pIdUsuarioLimitado) throws SQLException,
      IOException {
    oVm.RemoveAll();
    GetAll(pIdUsuarioLimitado);
    return oVm.getNumRows();
  }

  public int GetNoAsignados(int pIdFuncionario) throws SQLException,
      IOException {
    oVm.RemoveAll();
    String sSql;
    ResultSet oRs;
    sSql =
        "SELECT a.IdAnexo, Clave, Nombre, NombreCorto FROM Anexo a, AnexosXML b " +
        "WHERE a.IdAnexo not in (40,41) and a.IdAnexo = b.IdAnexo AND b.IdFuncionario = " + pIdFuncionario +
        " AND b.Estatus <> '0' AND not exists (SELECT c.IdAnexo FROM UsuarioAnexo c " +
        "WHERE c.IdFuncionario = b.IdFuncionario AND c.IdAnexo = b.IdAnexo )  ORDER BY a.IdAnexo";
    try {

      oCnn.Open();
      oRs = oCnn.Execute(sSql);
      oVm.setVMatrixNumCols(4);
      while (oRs.next()) {
        String sTemp[] = {
            oRs.getString("IdAnexo"), oRs.getString("Clave"),
            oRs.getString("Nombre"), oRs.getString("NombreCorto")};
        oVm.setVMatrixRow(sTemp);
      }
      this.Close(oRs);
    }
    catch (Throwable e) {
      System.out.println("Error en oAnexo.GetNoAsignados: " + e + " SQL:" +
                         sSql);
    }
    finally {
      oCnn.Close();
      return oVm.getNumRows();
    }
  }

  public boolean Insert(String pClave, String pNombre, String pNombreCorto) throws
      SQLException, IOException {
    String sSql;
    sSql = "INSERT INTO Anexo(Clave, Nombre, NombreCorto) VALUES ('" + pClave +
        "', '" +
        pNombre + "', '" + pNombreCorto + "')";
    oCnn.Open();
    oCnn.Execute(sSql);
    System.out.println(sSql);
    oCnn.Close();
    return true;
  }

  public boolean AgregaAnexos(Vector oVecAnexos, int pIdFuncionario,
                              int pIdUsuarioLimitado) throws SQLException,
      IOException {
    String sSql;
    oCnn.Open();
    sSql = "DELETE FROM UsuarioAnexo WHERE IdFuncionario = " + pIdFuncionario +
        " AND IdUsuarioLimitado = " + pIdUsuarioLimitado;
    oCnn.Execute(sSql);
    for (int i = 0; i < oVecAnexos.size(); i++) {
      sSql =
          "INSERT INTO UsuarioAnexo(IdAnexo, IdFuncionario, IdUsuarioLimitado) VALUES (" +
          oVecAnexos.elementAt(i) + ", " + pIdFuncionario + ", " +
          pIdUsuarioLimitado + ")";
      oCnn.Execute(sSql);
    }
    //System.out.println(sSql);
    oCnn.Close();
    return true;
  }

  public boolean Update(int pIdFuncionario, int pIdAnexo, int pIdUsuario) throws
      SQLException, IOException {
    String sSql;
    try {
      sSql = "UPDATE Usuario SET Usuario = ";
      oCnn.Open();
      System.out.println(sSql);
      oCnn.Execute(sSql);
      oCnn.Close();
      return true;
    }
    catch (Throwable e) {
      System.out.println("Error en oAnexo.Update: ");
    }
    return false;
  }

  public boolean Delete(int pIdUsuario) throws SQLException, IOException {
    String sSql;
    if (this.Get(pIdUsuario)) {
      sSql = "DELETE FROM Usuario WHERE IdUsuario = " + pIdUsuario;
      oCnn.Open();
      oCnn.Execute(sSql);
      System.out.println(sSql);
      oCnn.Close();
      return true;
    }
    System.out.println("oAnexo: No se ejecutó con exito el 'DELETE'()");
    return false;
  }

//Metodos Internos
  private void CargaDatos(int pIdAnexo, String pClave, String pNombre,
                          String pNombreCorto) {
    iIdAnexo = pIdAnexo;
    sClave = pClave;
    sNombre = pNombre;
    sNombreCorto = pNombreCorto;
  }

  private void Close(ResultSet pRs) throws SQLException {
    pRs.close();
    pRs = null;
    oCnn.Close();
  }
}