/************************************************************************
 * Module:  AnexoEstatus.java
 * Author:  Claudia Sandoval
 * Created: 02.Nov.2002
 * Purpose: Defines the Class Anexos Estatus
 * Ultima Modificacion:	11.Nov.2002
 * By:		Jesus Limon
 ***********************************************************************/

package com.gob;

import java.sql.*;
import java.io.*;
import java.util.*;
import com.consiss.db.*;
import com.consiss.util.tools.*;

public class AnexoEstatus {

//Declaración de Variables
  private int iIdAnexo;
  private int iIdFuncionario;
  private String sEstatus;
  private int iIdUsuario;
  private String sFechaActualizacion;
  private String sObservacion;
  private int iIdUsuarioLimitado;
  private String sNombre;
  private String sEstatusNoAplica = "0";
  private String sEstatusVacio = "1";
  private String sEstatusEnProceso = "2";
  private String sEstatusPorAutorizar = "3";
  private String sEstatusAutorizado = "4";
  private int sPorcEstatus = 0;
  private int sPorcRegistros = 0;
  private VMatrix oVm;
  private VMatrix vmFuncionario;
  private ConnectionJDBC oCnn;

//Inicializacion de la Clase
  public AnexoEstatus() throws SQLException, IOException {
    iIdAnexo = 0;
    iIdFuncionario = 0;
    sEstatus = "";
    iIdUsuario = 0;
    sFechaActualizacion = "";
    sObservacion = "";
    iIdUsuarioLimitado = 0;
    sNombre = "";
    oVm = new VMatrix();
    vmFuncionario = new VMatrix();
    oCnn = new ConnectionJDBC();
    /*oCnn.SetDsn("GobiernoER");
       oCnn.SetUsuario("sa");
       oCnn.SetClave("");*/
  }

//Creación de las Propiedades
  public void SetIdAnexo(int iDATA) {
    iIdAnexo = iDATA;
  }

  public int GetIdAnexo() {
    return iIdAnexo;
  }

  public int GetIdAnexo(int iPos) {
    int iGetIdAnexo = -1;
    try {
      iGetIdAnexo = java.lang.Integer.parseInt( ( ( (Vector) oVm.getVMatrixAll().
          elementAt(0)).elementAt(iPos) + ""));
    }
    catch (Throwable e) {
      System.out.println("oAnexo.GetIdAnexo: No se ejecutó con exito " + e +
                         " Pos:" + iPos + " [data]:" +
                         ( (Vector) oVm.getVMatrixAll().elementAt(0)).elementAt(
          iPos));
    }
    finally {
      return iGetIdAnexo;
    }
  }

  public void SetEstatus(String iDATA) {
    sEstatus = iDATA;
  }

  public String GetEstatus() {
    return sEstatus;
  }

  public String GetEstatus(int iPos) {
    return ( (Vector) oVm.getVMatrixAll().elementAt(1)).elementAt(iPos).
        toString();
  }

  public void SetIdUsuario(int iDATA) {
    iIdUsuario = iDATA;
  }

  public int GetIdUsuario() {
    return iIdUsuario;
  }

  public int GetIdUsuario(int iPos) {
    Object x = ( (Vector) oVm.getVMatrixAll().elementAt(2)).elementAt(iPos);
    return x != null ?
        java.lang.Integer.parseInt( (String) ( (Vector) oVm.getVMatrixAll().
                                              elementAt(2)).elementAt(iPos)) :
        0;
  }

  public void SetFechaActualizacion(String iDATA) {
    sFechaActualizacion = iDATA;
  }

  public String GetFechaActualizacion() {
    return sFechaActualizacion;
  }

  public String GetFechaActualizacion(int iPos) {
    return ( (Vector) oVm.getVMatrixAll().elementAt(3)).elementAt(iPos) != null ?
        ( (Vector) oVm.getVMatrixAll().elementAt(3)).elementAt(iPos).toString() :
        "";
  }

  public void SetObservacion(String iDATA) {
    sObservacion = iDATA;
  }

  public String GetObservacion() {
    return sObservacion;
  }

  public String GetObservacion(int iPos) {
    return ( (Vector) oVm.getVMatrixAll().elementAt(4)).elementAt(iPos) != null ?
        ( (Vector) oVm.getVMatrixAll().elementAt(4)).elementAt(iPos).toString() :
        "";
  }

  public int GetIdUsuarioLimitado() {
    return iIdUsuarioLimitado;
  }

  public int GetIdUsuarioLimitado(int iPos) {
    return ( (Vector) oVm.getVMatrixAll().elementAt(5)).elementAt(iPos) != null ?
        java.lang.Integer.parseInt( (String) ( (Vector) oVm.getVMatrixAll().
                                              elementAt(5)).elementAt(iPos)) :
        0;
  }

  public String GetNombre() {
    return sNombre;
  }

  public String GetNombre(int iPos) {
    return ( (Vector) oVm.getVMatrixAll().elementAt(6)).elementAt(iPos) != null ?
        ( (Vector) oVm.getVMatrixAll().elementAt(6)).elementAt(iPos).toString() :
        "";
  }

  public String GetEstatusNoAplica() {
    return sEstatusNoAplica;
  }

  public String GetEstatusVacio() {
    return sEstatusVacio;
  }

  public String GetEstatusEnProceso() {
    return sEstatusEnProceso;
  }

  public String GetEstatusPorAutorizar() {
    return sEstatusPorAutorizar;
  }

  public String GetEstatusAutorizado() {
    return sEstatusAutorizado;
  }

  public String GetEstatusDesc(String sDATA) {
    if (sDATA.equals(sEstatusNoAplica)) {
      return "No Aplica";
    }
    else if (sDATA.equals(sEstatusVacio)) {
      return "Vacio";
    }
    else if (sDATA.equals(sEstatusEnProceso)) {
      return "En Proceso";
    }
    else if (sDATA.equals(sEstatusPorAutorizar)) {
      return "Por Autorizar";
    }
    else if (sDATA.equals(sEstatusAutorizado)) {
      return "Autorizado";
    }
    else {
      return "";
    }
  }

  public String GetEstatusColor(String sDATA) {
    if (sDATA.equals(sEstatusNoAplica)) {
      return "#0000FF";
    }
    else if (sDATA.equals(sEstatusVacio)) {
      return "#FF0000";
    }
    else if (sDATA.equals(sEstatusEnProceso)) {
      return "#FFCC18";
    }
    else if (sDATA.equals(sEstatusPorAutorizar)) {
      return "#008000";
    }
    else if (sDATA.equals(sEstatusAutorizado)) {
      return "#000000";
    }
    else {
      return "";
    }
  }

  public void SetPorcEstatus(int iDATA) {
    sPorcEstatus = iDATA;
  }

  public int GetPorcEstatus() {
    return sPorcEstatus;
  }

  public int GetPorcEstatus(int iPos) {
    int iGetPorcEstatus = -1;
    try {
      iGetPorcEstatus = java.lang.Integer.parseInt( ( ( (Vector) vmFuncionario.
          getVMatrixAll().elementAt(0)).elementAt(iPos) + ""));
    }
    catch (Throwable e) {
      System.out.println(
          "AnexoEstatus.GetPorcEstatus: No se ejecutó con exito " + e + " Pos:" +
          iPos + " [data]:" +
          ( (Vector) vmFuncionario.getVMatrixAll().elementAt(0)).elementAt(iPos));
    }
    finally {
      return iGetPorcEstatus;
    }
  }

  public void SetPorcRegistros(int iDATA) {
    sPorcRegistros = iDATA;
  }

  public int GetPorcRegistros() {
    return sPorcRegistros;
  }

  public int GetPorcRegistros(int iPos) {
    int iGetPorcRegistros = -1;
    try {
      iGetPorcRegistros = java.lang.Integer.parseInt( ( ( (Vector)
          vmFuncionario.getVMatrixAll().elementAt(1)).elementAt(iPos) + ""));
    }
    catch (Throwable e) {
      System.out.println(
          "AnexoEstatus.GetPorcRegistros: No se ejecutó con exito " + e +
          " Pos:" + iPos + " [data]:" +
          ( (Vector) vmFuncionario.getVMatrixAll().elementAt(1)).elementAt(iPos));
    }
    finally {
      return iGetPorcRegistros;
    }
  }

//Metodos públicos
  public int GetAll(int pIdFuncionario) throws SQLException, IOException {
    if (oVm.getNumRows() > 0) {
      return oVm.getNumRows();
    }
    String sSql;
    ResultSet oRs;
    //sSql = "SELECT IdAnexo, Estatus, IdUsuario, FechaActualizacion, Observacion FROM AnexoEstatus WHERE IdFuncionario = " + pIdFuncionario;
    sSql = "SELECT a.IdAnexo, a.IdFuncionario IdFuncionario, Estatus, a.IdUsuario, FechaActualizacion, Observacion, " +
        "ISNULL(b.IdUsuarioLimitado,0) IdUsuarioLimitado, ISNULL(c.nombre, '') Nombre, " +
        "ISNULL(c.apepaterno, '') ApePaterno, ISNULL(c.apematerno, '') ApeMaterno " +
        "FROM (AnexoEstatus a LEFT OUTER JOIN UsuarioAnexo b ON ( a.IdAnexo = b.IdAnexo " +
        "AND a.IdFuncionario = b.IdFuncionario)) LEFT OUTER JOIN UsuarioLimitado c " +
        "ON ( c.IdUsuarioLimitado =  b.IdUsuarioLimitado) WHERE a.IdFuncionario = " +
        pIdFuncionario + " " +
        "ORDER BY a.IdAnexo";
    try {
      oCnn.Open();
      oRs = oCnn.Execute(sSql);
      oVm.setVMatrixNumCols(7);
      while (oRs.next()) {
        String sTemp[] = {
            oRs.getString("IdAnexo"), oRs.getString("Estatus"),
            oRs.getString("IdUsuario"), oRs.getString("FechaActualizacion"),
            oRs.getString("Observacion"), oRs.getString("IdUsuarioLimitado"),
            oRs.getString("Nombre") +
            (oRs.getString("ApePaterno") != "" ?
             " " + oRs.getString("ApePaterno") : "") +
            (oRs.getString("ApeMaterno") != "" ?
             " " + oRs.getString("ApeMaterno") : "")};
        oVm.setVMatrixRow(sTemp);
      }
      this.Close(oRs);
    }
    catch (Throwable e) {
      System.out.println("Error en oAnexo.GetAll: " + e + " SQL:" + sSql);
    }
    finally {
      oCnn.Close();
      return oVm.getNumRows();
    }
  }

  public int GetPos(int pIdFuncionario, int pIdAnexo) throws SQLException,
      IOException {
    GetAll(pIdFuncionario);
    return ( (Vector) oVm.getVMatrixAll().elementAt(0)).indexOf( (pIdAnexo + ""),
        0);
  }

  public boolean Get(int pIdFuncionario, int pIdAnexo) throws SQLException,
      IOException {
    ResultSet oRs;
    String sSql;
    sSql = "SELECT a.IdAnexo, a.IdFuncionario IdFuncionario, Estatus, a.IdUsuario, FechaActualizacion, " +
        "Observacion, ISNULL(b.IdUsuarioLimitado,0) IdUsuarioLimitado, ISNULL(c.nombre, '') nombre, ISNULL(c.apepaterno, '') apepaterno, ISNULL(c.apematerno, '') apematerno " +
        "FROM (AnexoEstatus a left outer join UsuarioAnexo b ON ( a.IdAnexo = b.IdAnexo " +
        "AND a.IdFuncionario = b.IdFuncionario)) left outer join UsuarioLimitado c " +
        "ON ( c.IdUsuarioLimitado =  b.IdUsuarioLimitado) WHERE a.IdFuncionario = " +
        pIdFuncionario + " AND a.IdAnexo = " + pIdAnexo;
    try {
      oCnn.Open();
      oRs = oCnn.Execute(sSql);
      if (oRs.next()) {
        CargaDatos(oRs.getInt("IdAnexo"), oRs.getInt("IdFuncionario"),
                   oRs.getString("Estatus"), oRs.getInt("IdUsuario"),
                   oRs.getString("FechaActualizacion"),
                   oRs.getString("Observacion"), oRs.getInt("IdUsuarioLimitado"),
                   oRs.getString("nombre"), oRs.getString("apepaterno"),
                   oRs.getString("apematerno"));
        this.Close(oRs);
        return true;
      }
      else {
        this.Close(oRs);
      }
      return false;
    }
    catch (Throwable e) {
      System.out.println("Error en oAnexoEstatus.Get: " + e + " SQL:" + sSql);
      oCnn.Close();
    }
    return false;
  }

  public boolean Insert(int pIdFuncionario, int pIdAnexo, String pEstatus,
                        int pIdUsuario,
                        String pFechaActualizacion, String pObservacion) throws
      SQLException, IOException {
    String sSql = "";
    try {
      if (this.Get(pIdFuncionario, pIdAnexo)) {
        this.InsertObservacion(pIdFuncionario, pIdAnexo, pEstatus, pIdUsuario,
                               pFechaActualizacion, pObservacion);
      }
      else {
        sSql = "INSERT INTO AnexoEstatus(IdFuncionario, IdAnexo, Estatus, IdUsuario, FechaActualizacion, Observacion) VALUES (" +
            pIdFuncionario + ", " + pIdAnexo + ", '" + pEstatus + "', " +
            pIdUsuario + ", " + pFechaActualizacion + ", '" + pObservacion +
            "')";
        oCnn.Open();
        oCnn.Execute(sSql);
        oCnn.Close();
      }
      return true;
    }
    catch (Throwable e) {
      try {
        this.Update(pIdFuncionario, pIdAnexo, pEstatus, pIdUsuario,
                    pFechaActualizacion);
        return true;
      }
      catch (Throwable x) {
        System.out.println("Error en oAnexoEstatus.Insert: " + e + " " + x +
                           " sSql:" + sSql);
      }
    }
    return false;
  }

  public boolean InsertObservacion(int pIdFuncionario, int pIdAnexo,
                                   String pEstatus, int pIdUsuario,
                                   String pFechaActualizacion,
                                   String pObservacion) throws SQLException,
      IOException {
    String sSql = "";
    try {
      sSql = "UPDATE AnexoEstatus SET Estatus = '" + pEstatus + "', " +
          " IdUsuario = " + pIdUsuario + ", " +
          " FechaActualizacion = " + pFechaActualizacion + ", " +
          " Observacion = '" + pObservacion + "' " +
          " WHERE IdFuncionario = " + pIdFuncionario +
          " AND IdAnexo = " + pIdAnexo;
      oCnn.Open();
      oCnn.Execute(sSql);
      oCnn.Close();
      return true;
    }
    catch (Throwable e) {
      System.out.println("Error en oAnexoEstatus.InsertObservacion: " + e +
                         " Sql:" + sSql);
      return false;
    }
  }

  public boolean Update(int pIdFuncionario, int pIdAnexo, String pEstatus,
                        int pIdUsuario,
                        String pFechaActualizacion) throws SQLException,
      IOException {
    String sSql = "";
    try {
      sSql = "UPDATE AnexoEstatus SET Estatus = '" + pEstatus + "', " +
          " IdUsuario = " + pIdUsuario + ", " +
          " FechaActualizacion = " + pFechaActualizacion + " " +
          " WHERE IdFuncionario = " + pIdFuncionario +
          " AND IdAnexo = " + pIdAnexo;
      oCnn.Open();
      oCnn.Execute(sSql);
      oCnn.Close();
      return true;
    }
    catch (Throwable e) {
      System.out.println("Error en oAnexo.Update: " + e + " Sql:" + sSql);
    }
    return false;
  }

  public int GetContador(int pIdFuncionario) throws SQLException, IOException {
    if (vmFuncionario.getNumRows() > 0) {
      return vmFuncionario.getNumRows();
    }
    oCnn.Open();
    ResultSet rs = null;
    String sSql = "";
    sSql = "select 0 as Estatus, count(IdFuncionario) as Registros from AnexoEstatus  WHERE IdFuncionario = " +
        pIdFuncionario;
    sSql = sSql + " and Estatus = '0' union ";
    sSql = sSql + "select 1 as Estatus, count(IdFuncionario) as Registros from AnexoEstatus  WHERE IdFuncionario = " +
        pIdFuncionario;
    sSql = sSql + " and Estatus = '1' union ";
    sSql = sSql + "select 2 as Estatus, count(IdFuncionario) as Registros from AnexoEstatus  WHERE IdFuncionario = " +
        pIdFuncionario;
    sSql = sSql + " and Estatus = '2' union ";
    sSql = sSql + "select 3 as Estatus, count(IdFuncionario) as Registros from AnexoEstatus  WHERE IdFuncionario = " +
        pIdFuncionario;
    sSql = sSql + " and Estatus = '3' union ";
    sSql = sSql + "select 4 as Estatus, count(IdFuncionario) as Registros from AnexoEstatus  WHERE IdFuncionario = " +
        pIdFuncionario;
    sSql = sSql + " and Estatus = '4'";
    try {
      rs = oCnn.Execute(sSql);
      vmFuncionario.setVMatrixNumCols(2);
      while (rs.next()) {
        String saTabla[] = {
            rs.getString("Estatus"), rs.getString("Registros")};
        vmFuncionario.setVMatrixRow(saTabla);
      }
      rs.close();
      rs = null;
    }
    catch (Throwable e) {
      System.out.println("Error en Funcionario.GetContador: " + e + " SQL:" +
                         sSql);
    }
    finally {
      if (oCnn != null) {
        oCnn.Close();
      }
      return vmFuncionario.getNumRows();
    }
  }

  public boolean Update(int pIdFuncionario, int pIdAnexo, String pEstatus,
                        int pIdUsuario,
                        String pFechaActualizacion, String pObservacion) throws
      SQLException, IOException {
    String sSql = "";
    try {
      sSql = "UPDATE AnexoEstatus SET Estatus = '" + pEstatus + "', " +
          " IdUsuario = " + pIdUsuario + ", " +
          " FechaActualizacion = " + pFechaActualizacion + ", " +
          " Observacion = '" + pObservacion + "' " +
          " WHERE IdFuncionario = " + pIdFuncionario +
          " AND IdAnexo = " + pIdAnexo;
      oCnn.Open();
      //System.out.println(sSql);
      oCnn.Execute(sSql);
      oCnn.Close();
      return true;
    }
    catch (Throwable e) {
      System.out.println("Error en oAnexo.Update: " + e + " SQL:" + sSql);
    }
    return false;
  }

  public boolean UpdateObservacion(int pIdFuncionario, int pIdAnexo,
                                   String pObservacion) throws SQLException,
      IOException {
    String sSql = "";
    try {
      sSql = "UPDATE AnexoEstatus SET " +
          " Observacion = '" + pObservacion + "' " +
          " WHERE IdFuncionario = " + pIdFuncionario +
          " AND IdAnexo = " + pIdAnexo;
      oCnn.Open();
      //System.out.println(sSql);
      oCnn.Execute(sSql);
      oCnn.Close();
      return true;
    }
    catch (Throwable e) {
      System.out.println("Error en oAnexo.UpdateObservacion: " + e + " SQL:" +
                         sSql);
    }
    return false;
  }

//Metodos Internos
  private void CargaDatos(int pIdAnexo, int pIdFuncionario, String pEstatus,
                          int pIdUsuario,
                          String pFechaActualizacion, String pObservacion,
                          int pIdUsuarioLimitado,
                          String pNombre, String pApePaterno,
                          String pApeMaterno) {
    iIdAnexo = pIdAnexo;
    iIdFuncionario = pIdFuncionario;
    sEstatus = pEstatus;
    iIdUsuario = pIdUsuario;
    sFechaActualizacion = pFechaActualizacion;
    sObservacion = pObservacion;
    iIdUsuarioLimitado = pIdUsuarioLimitado;
    sNombre = (pNombre != null ? pNombre + " " : "") +
        (pApePaterno != null ? pApePaterno + " " : "") +
        (pApeMaterno != null ? pApeMaterno + " " : "");
  }

  private void Close(ResultSet pRs) throws SQLException {
    pRs.close();
    pRs = null;
    oCnn.Close();
  }
}