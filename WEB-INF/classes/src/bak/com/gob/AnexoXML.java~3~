/************************************************************************
 * Module:  AnexoXML.java
 * Author:  Claudia Sandoval
 * Created: 02.Nov.2002
 * Purpose: Defines the Class Anexos XML
 * Ultima Modificacion:
 * By:
 ***********************************************************************/

package com.gob;

import java.sql.*;
import java.io.*;
import java.util.*;
import com.consiss.db.*;
import com.consiss.util.tools.*;

public class AnexoXML {

//Declaración de Variables
  private int iIdAnexo;
  private int iIdFuncionario;
  private String sEstatus;
  private int iIdUsuario;
  private String sAnexoXML;
  private String sAnexoXSL;
  private String sAnexoTMP;
  private String sFechaActualizacion;

  private String sEstatusNoAplica = "0";
  private String sEstatusVacio = "1";
  private String sEstatusEnProceso = "2";
  private String sEstatusLleno = "3";
  private VMatrix oVm;
  private ConnectionJDBC oCnn;

//Inicializacion de la Clase
  public AnexoXML() throws SQLException, IOException {
    iIdAnexo = 0;
    iIdFuncionario = 0;
    sEstatus = "";
    iIdUsuario = 0;
    sAnexoXML = "";
    sAnexoXSL = "";
    sAnexoTMP = "";
    sFechaActualizacion = "";
    oVm = new VMatrix();
    oCnn = new ConnectionJDBC();
    /*oCnn.SetDsn("GobiernoER");
       oCnn.SetUsuario("sa");
       oCnn.SetClave("");*/
  }

//Creación de las Propiedades
  public void SetIdAnexo(int iDATA) {
    iIdAnexo = iDATA;
  }

  public int GetIdAnexo() {
    return iIdAnexo;
  }

  public int GetIdAnexo(int iPos) {
    int iGetIdAnexo = -1;
    try {
      iGetIdAnexo = java.lang.Integer.parseInt( ( ( (Vector) oVm.getVMatrixAll().
          elementAt(0)).elementAt(iPos) + ""));
    }
    catch (Throwable e) {
      System.out.println("oAnexo.GetIdAnexo: No se ejecutó con exito " + e +
                         " Pos:" + iPos + " [data]:" +
                         ( (Vector) oVm.getVMatrixAll().elementAt(0)).elementAt(
          iPos));
    }
    finally {
      return iGetIdAnexo;
    }
  }

  public void SetEstatus(String iDATA) {
    sEstatus = iDATA;
  }

  public String GetEstatus() {
    return sEstatus;
  }

  public String GetEstatus(int iPos) {
    return ( (Vector) oVm.getVMatrixAll().elementAt(1)).elementAt(iPos).
        toString();
  }

  public void SetIdUsuario(int iDATA) {
    iIdUsuario = iDATA;
  }

  public int GetIdUsuario() {
    return iIdUsuario;
  }

  public int GetIdUsuario(int iPos) {
    return ( (Vector) oVm.getVMatrixAll().elementAt(2)).elementAt(iPos) != null ?
        java.lang.Integer.parseInt( (String) ( (Vector) oVm.getVMatrixAll().
                                              elementAt(2)).elementAt(iPos)) :
        0;
  }

  public void SetAnexoXML(String iDATA) {
    sAnexoXML = iDATA;
  }

  public String GetAnexoXML() {
    return sAnexoXML;
  }

  public String GetAnexoXML(int iPos) {
    return ( (Vector) oVm.getVMatrixAll().elementAt(3)).elementAt(iPos) != null ?
        ( (Vector) oVm.getVMatrixAll().elementAt(3)).elementAt(iPos).toString() :
        "";
  }

  public void SetAnexoXSL(String iDATA) {
    sAnexoXSL = iDATA;
  }

  public String GetAnexoXSL() {
    return sAnexoXSL;
  }

  public String GetAnexoXSL(int iPos) {
    return ( (Vector) oVm.getVMatrixAll().elementAt(4)).elementAt(iPos) != null ?
        ( (Vector) oVm.getVMatrixAll().elementAt(4)).elementAt(iPos).toString() :
        "";
  }

  public void SetAnexoTMP(String iDATA) {
    sAnexoTMP = iDATA;
  }

  public String GetAnexoTMP() {
    return sAnexoTMP;
  }

  public String GetAnexoTMP(int iPos) {
    return ( (Vector) oVm.getVMatrixAll().elementAt(5)).elementAt(iPos) != null ?
        ( (Vector) oVm.getVMatrixAll().elementAt(5)).elementAt(iPos).toString() :
        "";
  }

  public void SetFechaActualizacion(String iDATA) {
    sFechaActualizacion = iDATA;
  }

  public String GetFechaActualizacion() {
    return sFechaActualizacion;
  }

  public String GetFechaActualizacion(int iPos) {
    return ( (Vector) oVm.getVMatrixAll().elementAt(6)).elementAt(iPos) != null ?
        ( (Vector) oVm.getVMatrixAll().elementAt(6)).elementAt(iPos).toString() :
        "";
  }

  public String GetEstatusNoAplica() {
    return sEstatusNoAplica;
  }

  public String GetEstatusVacio() {
    return sEstatusVacio;
  }

  public String GetEstatusEnProceso() {
    return sEstatusEnProceso;
  }

  public String GetEstatusLleno() {
    return sEstatusLleno;
  }

  public String GetEstatusDesc(String sDATA) {
    if (sDATA.equals(sEstatusNoAplica)) {
      return "No Aplica";
    }
    else if (sDATA.equals(sEstatusVacio)) {
      return "Vacio";
    }
    else if (sDATA.equals(sEstatusEnProceso)) {
      return "En Proceso";
    }
    else if (sDATA.equals(sEstatusLleno)) {
      return "Lleno";
    }
    else {
      return "";
    }
  }

//Metodos públicos

  public int GetAll(int pIdFuncionario) throws SQLException, IOException {
    if (oVm.getNumRows() > 0) {
      return oVm.getNumRows();
    }
    String sSql;
    ResultSet oRs;
    sSql = "SELECT IdAnexo, IdFuncionario, Estatus, IdUsuario, AnexoXML, AnexoXSL, AnexoTMP, FechaActualizacion FROM AnexosXML WHERE IDANEXO NOT IN (40,41) ANDIdFuncionario = " +
        pIdFuncionario;
    try {
      oCnn.Open();
      oRs = oCnn.Execute(sSql);
      oVm.setVMatrixNumCols(7);
      while (oRs.next()) {
        String sTemp[] = {
            oRs.getString("IdAnexo"), oRs.getString("Estatus"),
            oRs.getString("IdUsuario"),
            oRs.getString("AnexoXML"), oRs.getString("AnexoXSL"),
            oRs.getString("AnexoTMP"), oRs.getString("FechaActualizacion")};
        oVm.setVMatrixRow(sTemp);
      }
      this.Close(oRs);
    }
    catch (Throwable e) {
      System.out.println("Error en oAnexoXML.GetAll: " + e + " SQL:" + sSql);
    }
    finally {
      oCnn.Close();
      return oVm.getNumRows();
    }
  }

  public int GetPos(int pIdFuncionario, int pIdAnexo) throws SQLException,
      IOException {
    GetAll(pIdFuncionario);
    return ( (Vector) oVm.getVMatrixAll().elementAt(0)).indexOf( (pIdAnexo + ""),
        0);
  }

  public boolean Get(int pIdFuncionario, int pIdAnexo) throws SQLException,
      IOException {
    ResultSet oRs;
    String sSql;
    sSql = "SELECT IdAnexo, IdFuncionario, Estatus, IdUsuario, AnexoXML, AnexoXSL, AnexoTMP, FechaActualizacion FROM AnexosXML WHERE IDANEXO NOT IN (40,41) AND IdFuncionario = " +
        pIdFuncionario + " AND IdAnexo = " + pIdAnexo;
    try {
      oCnn.Open();
      oRs = oCnn.Execute(sSql);
      if (oRs.next()) {
        CargaDatos(oRs.getInt("IdAnexo"), oRs.getInt("IdFuncionario"),
                   oRs.getString("Estatus"),
                   oRs.getInt("IdUsuario"), oRs.getString("AnexoXML"),
                   oRs.getString("AnexoXSL"),
                   oRs.getString("AnexoTMP"),
                   oRs.getString("FechaActualizacion"));
        this.Close(oRs);
      }
      else {
        this.Close(oRs);
      }
      return false;
    }
    catch (Throwable e) {
      System.out.println("Error en oAnexoXML.Get: " + e + " SQL:" + sSql);
      oCnn.Close();
    }
    return false;
  }

  public VMatrix getXmlToVMatrix(String sRenglon, Vector oVecColumnas,
                                 String sXml) {
    int iPosRenglonIni, iPosRenglonFin, iPosColumnaIni, iPosColumnaFin;
    String sRegistroPaso, sColumnaName, sColumnaPaso;
    iPosRenglonIni = 0;
    iPosRenglonFin = 0;
    VMatrix oVXml = new VMatrix();
    oVXml.setVMatrixNumCols(oVecColumnas.size());
    while (iPosRenglonFin < sXml.length()) {
      String[] sTemp = new String[oVecColumnas.size()];
      iPosRenglonIni = sXml.indexOf(sRenglon, iPosRenglonFin);
      iPosRenglonFin = iPosRenglonIni >= 0 ?
          sXml.indexOf(sRenglon, iPosRenglonIni + sRenglon.length()) : -1;
      sRegistroPaso = iPosRenglonFin > 0 ?
          sXml.substring(iPosRenglonIni + 1 + sRenglon.length(),
                         iPosRenglonFin - 2) : "";

      for (int i = 0; i < oVecColumnas.size() && sRegistroPaso.length() > 0; i++) {
        iPosColumnaFin = iPosRenglonIni + 1;
        sColumnaName = (String) oVecColumnas.elementAt(i);
        iPosColumnaIni = sXml.indexOf(sColumnaName, iPosColumnaFin);
        iPosColumnaFin = iPosColumnaIni > 0 ?
            sXml.indexOf(sColumnaName, iPosColumnaIni + sColumnaName.length()) :
            ( -1);
        sColumnaPaso = iPosColumnaFin > 0 ?
            sXml.substring(iPosColumnaIni + 1 + sColumnaName.length(),
                           iPosColumnaFin - 2) : "";
        sTemp[i] = sColumnaPaso;
      }
      iPosRenglonFin = iPosRenglonFin > 0 ?
          (iPosRenglonFin + sRenglon.length() + 1) : sXml.length();
      oVXml.setVMatrixRow(sTemp);
    }
    return oVXml;
  }

  public String getVMatrixToXml(String sRenglon, Vector oVecColumnas,
                                VMatrix oVXml) {
    String sXml = "", sColumnaName = "";
    try {
      for (int i = 0; i < oVXml.getNumRows(); i++) {
        sXml = sXml + "<" + sRenglon + ">";
        for (int j = 0; j < oVecColumnas.size(); j++) {
          sColumnaName = (String) oVecColumnas.elementAt(j);
          sXml = sXml + "<" + sColumnaName + ">";
          sXml = sXml +
              ( (Vector) oVXml.getVMatrixAll().elementAt(j)).elementAt(i);
          sXml = sXml + "</" + sColumnaName + ">";
        }
        sXml = sXml + "</" + sRenglon + ">";
      }
    }
    catch (Throwable e) {
      System.out.println("Error en oAnexoXML.getVMatrixToXml: " + e);
      oCnn.Close();
    }
    return sXml;
  }

  public boolean CreaAnexosFuncionario(int pIdFuncionario) throws SQLException,
      IOException {
    Anexo oAnexo = new Anexo();
    oAnexo.GetAll();
    String sSql;
    oCnn.Open();
    for (int i = 0; i < oAnexo.GetAll().getNumRows(); i++) {
      sSql = "INSERT INTO AnexosXML(IdAnexo, IdFuncionario, Estatus) VALUES (" +
          oAnexo.GetIdAnexo(i) + ", " +
          pIdFuncionario + ", '" + sEstatusVacio + "')";
      oCnn.Execute(sSql);
    }
    oCnn.Close();
    return true;
  }

  public boolean Update(int pIdFuncionario, int pIdAnexo, String pEstatus,
                        int pIdUsuario,
                        String pAnexoXML, String pAnexoXSL, String pAnexoTMP,
                        String pFechaActualizacion) throws SQLException,
      IOException {
    String sSql;
    try {
      sSql = "UPDATE AnexosXML SET Estatus = '" + pEstatus + "', " +
          " IdUsuario = " + pIdUsuario + ", " +
          " AnexoXML = '" + pAnexoXML + "', " +
          " AnexoXSL = '" + pAnexoXSL + "', " +
          " AnexoTMP = '" + pAnexoTMP + "', " +
          " FechaActualizacion = '" + pFechaActualizacion + "' " +
          " WHERE IdFuncionario = " + pIdFuncionario +
          " AND IdAnexo = " + pIdAnexo;
      oCnn.Open();
      System.out.println(sSql);
      oCnn.Execute(sSql);
      oCnn.Close();
      return true;
    }
    catch (Throwable e) {
      System.out.println("Error en oAnexo.Update: ");
    }
    return false;
  }

//Metodos Internos

  private void CargaDatos(int pIdAnexo, int pIdFuncionario, String pEstatus,
                          int pIdUsuario, String pAnexoXML, String pAnexoXSL,
                          String pAnexoTMP, String pFechaActualizacion) {
    iIdAnexo = pIdAnexo;
    iIdFuncionario = pIdFuncionario;
    sEstatus = pEstatus;
    iIdUsuario = pIdUsuario;
    sAnexoXML = pAnexoXML;
    sAnexoXSL = pAnexoXSL;
    sAnexoTMP = pAnexoTMP;
    sFechaActualizacion = pFechaActualizacion;
  }

  private void Close(ResultSet pRs) throws SQLException {
    pRs.close();
    pRs = null;
    oCnn.Close();
  }
}